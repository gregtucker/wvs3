 # -*- coding: utf-8 -*-
"""
child_reader.py

Reads output from CHILD model.

Created on Thu Aug 20 16:23:47 2015

@author: gtucker
"""

import os
from numpy import zeros

_BASIC_CHILD_EXTENSIONS = [ 'nodes',
                      'edges',
                      'tri',
                      'z' ]


class ChildRun(object):
    """
    Represents files generated by a CHILD model run.
    """
    def __init__(self, filename):
        """
        Finds and opens CHILD output files with a given base name.
        """
        # find and open the files        
        self.open_child_files(filename)
        
        # find out the time associated with the first time slice in file
        self.current_time = self.read_current_time()
        self.current_time_slice = 0
        
        # find out how many nodes there are (at least in first time slice,
        # usually the same in all time slices). Also, how many edges and
        # triangles.
        self.number_of_nodes = self.read_number_of_nodes()
        self.number_of_edges = self.read_number_of_edges()
        
        # create the arrays needed to store the data for one time slice
        self.create_data_arrays()
        
    def open_child_files(self, name):
        """
        Looks for, and if possible, opens CHILD files with the given base name.
        Raises an IOError if one or more of the required files cannot be 
        found.
        
        Example
        -------
        >>> for ext in _BASIC_CHILD_EXTENSIONS:
        ...     f = open('test.'+ext, 'w')
        ...     f.close()
        >>> f = open('only_one_file.nodes', 'w')
        >>> f.close()
        >>> cr = ChildRun('test')
        >>> cr = ChildRun('test.edges')
        """
        basename = os.path.splitext(name)[0]
        try:
            self.nodefile = open(basename+'.nodes', 'r')
            self.edgefile = open(basename+'.edges', 'r')
            self.trifile = open(basename+'.tri', 'r')
            self.zfile = open(basename+'.z', 'r')
        except IOError:
            print('Can not find one or more files for run called '+basename)
            raise IOError
            
            
    def read_next_timeslice(self):
        """
        Reads data for the next timeslice for the current run.
        """
        self.read_node_data()
        
        
    def read_node_data(self):
        """
        Reads node data for the current time slice.
        """
        # read the current time
        tm = float(self.nodefile.readline())
        self.current_time = tm
        
        # read the number of nodes
        nn = int(self.nodefile.readline())
        print 'nn', nn
        if nn!=self.number_of_nodes:
            # Number of nodes has changed; need to re-size the node arrays
            self.number_of_nodes = nn
            self.create_node_arrays()
        
        # read info for all the nodes
        for n in xrange(nn):
            line = self.nodefile.readline()
            line = line.split()
            print line
            assert len(line)==4, 'Error in node file'
            self.x[n] = float(line[0])
            self.y[n] = float(line[1])
            self.edg_at_node[n] = int(line[2])
            self.bnd[n] = int(line[3])
            
    
    def read_current_time(self):
        """
        Reads and returns the current time in the output files.
        """
        # Get the current position in the file
        curpos = self.zfile.tell()
        print 'current position is ', curpos
        
        # Read the line containing the time
        self.current_time = float(self.zfile.readline())
        print 'current position is now ', curpos
        print 'current time is now ', self.current_time
        
        # Go back to the previous location
        self.zfile.seek(curpos)
        print 'current position is finally ', curpos
        print 'and current time is  ', self.current_time
        
        
    def read_number_of_nodes(self):
        """
        Reads and returns number of nodes in current time slice.
        """
        # Remember position in file
        curpos = self.zfile.tell()
        
        # Read the line that should be time
        self.zfile.readline()
        
        # Read the line that should be number of nodes
        nn = int(self.zfile.readline())
        print 'there are',nn, 'nodes'
        
        # Return to the previous position
        self.zfile.seek(curpos)
        
        return nn
        
        
    def read_number_of_edges(self):
        """
        Reads and returns number of edges in current time slice.
        """
        # Remember position in file
        curpos = self.edgefile.tell()
        
        # Read the line that should be time
        self.edgefile.readline()
        
        # Read the line that should be number of nodes
        ne = int(self.edgefile.readline())
        print 'there are',ne, 'edges'
        
        # Return to the previous position
        self.edgefile.seek(curpos)
        
        return ne
        
        
    def create_node_arrays(self):
        """Creates (or re-creates) the arrays of length equal to the 
        number of nodes."""
        
        # Create arrays for node-based info
        nn = self.number_of_nodes
        self.x = zeros(nn)
        self.y = zeros(nn)
        self.z = zeros(nn)
        self.edg_at_node = zeros(nn, dtype=int)
        self.bnd = zeros(nn, dtype=int)

        
    def create_data_arrays(self):
        """Creates the various arrays needed to store CHILD variables for one
        time slice."""
        self.create_node_arrays()
        
        # Create arrays for...
        
        
        
def child_files_exist_with_name(the_name):
    """
    Returns True if file with specified name plus each of the standard 
    extensions exists at the current location, False otherwise.
    
    Parameters
    ----------
    basename : str
        Base name for CHILD run.
        
    Example
    -------
    >>> for ext in _BASIC_CHILD_EXTENSIONS:
    ...     f = open('test.'+ext, 'w')
    ...     f.close()
    >>> f = open('only_one_file.nodes', 'w')
    >>> f.close()
    >>> child_files_exist_with_name('test')
    True
    >>> child_files_exist_with_name('no_such_file')
    False
    >>> child_files_exist_with_name('only_one_file')
    False
    >>> child_files_exist_with_name('test.nodes')
    True
    """
    basename = os.path.splitext(the_name)[0]  # remove any extension
    for ext in _BASIC_CHILD_EXTENSIONS:
        if not os.path.exists(basename+'.'+ext):
            return False
    return True


def open_childrun(filename):
    """
    Creates and returns an instance of a childrun object, or throws an IOError.
    """
    return ChildRun(filename)
    

if __name__=='__main__':
    import doctest
    doctest.testmod()
    